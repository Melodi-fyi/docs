openapi: 3.0.0
info:
  title: Melodi API
  description: API for managing Melodi resources such as threads, feedback, and users.
  version: 1.0.0
servers:
  - url: https://app.melodi.fyi/api/external

paths:
  /threads:
    get:
      summary: Retrieve all threads
      security:
         - ApiKeyAuth: []
      parameters:
        - in: query
          name: ids
          schema:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
          description: Single thread ID or list of thread IDs to filter by
        - in: query
          name: externalUserIds
          schema:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
          description: Single external user ID or list of external user IDs to filter by
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter threads
        - in: query
          name: userSearch
          schema:
            type: string
          description: Search term to filter by user
        - in: query
          name: projectId
          schema:
            type: integer
          description: ID of the project to filter threads by
        - in: query
          name: intentIds
          schema:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
          description: Single intent ID or list of intent IDs to filter by
        - in: query
          name: userSegmentIds
          schema:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
          description: Single user segment ID or list of user segment IDs to filter by
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: Filter threads created before this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z)
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: Filter threads created after this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z) 
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 50
          description: Number of threads to return per page
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 0
          description: Page index for pagination
      responses:
        '200':
          description: Successfully retrieved list of threads
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/Thread'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      summary: Create a new thread
      requestBody:
        description: A thread object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
      responses:
        '201':
          description: Thread successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
      summary: Update an existing thread
      requestBody:
        description: A thread object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
      responses:
        '200':
          description: Thread successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thread'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

  /feedback:
    post:
      summary: Create user feedback
      description: This API can be used instead of our Feedback UI component (thumbs up/down) to create feedbacks that will be visible in the Feedback Inbox.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackCreateRequest'
      responses:
        '200':
          description: Feedback successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalFeedback'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      summary: Retrieve projects for an organization
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: organizationId
          required: true
          schema:
            type: string
          description: The ID of the organization to retrieve projects for
      responses:
        '200':
          description: Successfully retrieved projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

    post:
      summary: Create a new project
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: apiKey

  schemas:
    Thread:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier for the thread
          nullable: true
        externalId:
          type: string
          description: External thread ID
          nullable: true
        organizationId:
          type: number
          description: ID of the organization to which the thread belongs
        projectId:
          type: number
          description: ID of the project to which the thread belongs
          nullable: true
        projectName:
          type: string
          description: Name of the project to which the thread belongs
          nullable: true
        messages:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MarkdownMessage'
              - $ref: '#/components/schemas/JsonMessage'
          description: Array of messages associated with the thread
        externalUser:
          $ref: '#/components/schemas/CreateExternalUserRequest'
          nullable: true
        metadata:
          type: object
          description: Metadata associated with the thread
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Date when the thread was created
        updatedAt:
          type: string
          format: date-time
          description: Date when the thread was last updated
      required:
        - messages
      anyOf:
        - title: "Thread with Project ID"
          required: [projectId]
        - title: "Thread with Project Name"
          required: [projectName]

    MarkdownMessage:
      title: "Markdown Message"
      type: object
      properties:
        externalId:
          type: string
          nullable: true
        type:
          type: string
          enum: ['markdown']
          default: 'markdown'
        role:
          type: string
        content:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          default: {}
      required:
        - role

    JsonMessage:
      title: "JSON Message"
      type: object
      properties:
        externalId:
          type: string
          nullable: true
        type:
          type: string
          enum: ['json']
        role:
          type: string
        jsonContent:
          type: object
          additionalProperties: true
        metadata:
          type: object
          additionalProperties:
            type: string
          default: {}
      required:
        - role
        - jsonContent

    Message:
      description: |
        Message object that can be either a Markdown or JSON message.
        For Markdown messages, use the 'content' field.
        For JSON messages, use the 'jsonContent' field.
      oneOf:
        - $ref: '#/components/schemas/MarkdownMessage'
        - $ref: '#/components/schemas/JsonMessage'

    Error:
      type: object
      properties:
        error:
          type: string

    FeedbackCreateRequest:
      type: object
      properties:
        threadId:
          type: string
          description: ID of the thread containing the message being rated
        messageId:
          type: string
          description: ID of the specific message being rated
        feedback:
          $ref: '#/components/schemas/Feedback'
        suggestedChanges:
          type: string
          description: Optional proposed changes to the message content
          nullable: true
        user:
          $ref: '#/components/schemas/UserInfo'
      required:
        - threadId
        - messageId
        - feedback

    ExternalFeedback:
      type: object
      properties:
        id:
          type: string
        feedbackType:
          type: string
        feedbackText:
          type: string
        threadId:
          type: string
        messageId:
          type: string
        userId:
          type: string
          nullable: true
        suggestedChanges:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time

    Feedback:
      type: object
      properties:
        feedbackType:
          type: string
          enum:
            - POSITIVE
            - NEGATIVE
        feedbackText:
          type: string
          nullable: true
      required:
        - feedbackType

    UserInfo:
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
      required:
        - email

    JSONObject:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: number
          - type: boolean
          - $ref: '#/components/schemas/JSONObject'
          - $ref: '#/components/schemas/JSONArray'
    JSONArray:
      type: array
      items:
        $ref: '#/components/schemas/JSONObject'

    Project:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the project
        name:
          type: string
          description: Name of the project
        organizationId:
          type: string
          description: ID of the organization the project belongs to
      required:
        - id
        - name
        - organizationId

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the project to be created
      required:
        - name

    CreateThreadRequest:
      oneOf:
        - title: "Create Thread with Project ID"
          type: object
          required: [messages, projectId]
          properties:
            externalId:
              type: string
              nullable: true
            projectId:
              type: number
            projectName:
              type: string
              nullable: true
            messages:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/MarkdownMessage'
                  - $ref: '#/components/schemas/JsonMessage'
            metadata:
              type: object
              additionalProperties:
                type: string
            externalUser:
              $ref: '#/components/schemas/CreateExternalUserRequest'
              nullable: true
        - title: "Create Thread with Project Name"
          type: object
          required: [messages, projectName]
          properties:
            externalId:
              type: string
              nullable: true
            projectId:
              type: number
              nullable: true
            projectName:
              type: string
            messages:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/MarkdownMessage'
                  - $ref: '#/components/schemas/JsonMessage'
            metadata:
              type: object
              additionalProperties:
                type: string
            externalUser:
              $ref: '#/components/schemas/CreateExternalUserRequest'
              nullable: true
