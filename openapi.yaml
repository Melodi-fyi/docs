openapi: 3.0.0
info:
  title: Experiments API
  description: API for managing experiments
  version: 1.0.0
servers:
  - url: https://app.melodi.fyi/api/external

paths:
  /experiments:
    get:
      summary: Get all experiments
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A list of experiments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experiment'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error

    post:
      summary: Create a new experiment
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateExperimentIDRequest'
                - $ref: '#/components/schemas/CreateBinaryExperimentRequest'
                - $ref: '#/components/schemas/CreateABTestRequest'
      responses:
        '201':
          description: Experiment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs:
    post:
      summary: Create one or more logs
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLogRequest'
      responses:
        '200':
          description: Logs created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoggedSample'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /feedback:
    post:
      summary: Create user feedback
      description: This API can be used instead of our Feedback UI component (thumbs up/down) to create feedbacks that will be visible in the Feedback Inbox.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackCreateRequest'
      responses:
        '200':
          description: Feedback successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalFeedback'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: apiKey

  schemas:
    Experiment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time

    CreateExperimentIDRequest:
      type: object
      properties:
        experiment:
          $ref: '#/components/schemas/InternalExperimentEggNoSamplesNoComparisons'

    CreateBinaryExperimentRequest:
      type: object
      properties:
        experiment:
          $ref: '#/components/schemas/InternalExperimentEgg'
        samples:
          type: array
          items:
            $ref: '#/components/schemas/InternalSampleEgg'

    CreateABTestRequest:
      type: object
      properties:
        experiment:
          $ref: '#/components/schemas/InternalExperimentEggWithProject'
        comparisons:
          type: array
          items:
            $ref: '#/components/schemas/InternalComparisonEggWithVersion'

    CreateLogRequest:
      type: object
      properties:
        projectName:
          type: string
          nullable: true
        versionName:
          type: string
          nullable: true
        data:
          type: object
      required:
        - data

    LoggedSample:
      type: object
      properties:
        id:
          type: string
          description: The ID of the logged sample
        data:
          type: string
          description: The log data
        projectId:
          type: string
          description: The ID of the project
        versionId:
          type: string
          description: The ID of the project version

    InternalExperimentEggNoSamplesNoComparisons:
      type: object
      properties:
        name:
          type: string
        projectId:
          type: integer
          nullable: true
        instructions:
          type: string
          nullable: true

    InternalExperimentEgg:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: string
          nullable: true
        project:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
      oneOf:
        - not:
            required:
              - project
        - required:
            - project
            - version

    InternalExperimentEggWithProject:
      type: object
      properties:
        name:
          type: string
        instructions:
          type: string
          nullable: true
        project:
          type: string
        version:
          type: string

    InternalSampleEgg:
      type: object
      properties:
        title:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        response:
          type: string

    InternalComparisonEgg:
      type: object
      properties:
        samples:
          type: array
          items:
            $ref: '#/components/schemas/InternalSampleEgg'

    InternalComparisonEggWithVersion:
      type: object
      properties:
        samples:
          type: array
          items:
            $ref: '#/components/schemas/InternalSampleEggWithVersion'

    InternalSampleEggWithVersion:
      type: object
      properties:
        title:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        response:
          type: string
        version:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string

    FeedbackCreateRequest:
      type: object
      required:
        - sample
        - feedback
      properties:
        sample:
          $ref: '#/components/schemas/Sample'
        feedback:
          $ref: '#/components/schemas/Feedback'
        user:
          $ref: '#/components/schemas/UserInfo'
    ExternalFeedback:
      type: object
      properties:
        id:
          type: string
        feedbackType:
          type: string
        feedbackText:
          type: string
        userId:
          type: string
          nullable: true
    Sample:
      type: object
      properties:
        project:
          type: string
          nullable: true
        projectVersion:
          type: string
          nullable: true
        input:
          type: string
          nullable: true
        output:
          type: string
        metadata:
          $ref: '#/components/schemas/JSONObject'
    Feedback:
      type: object
      properties:
        feedbackType:
          type: string
          enum:
            - POSITIVE
            - NEGATIVE
        feedbackText:
          type: string
          nullable: true
    UserInfo:
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
    JSONObject:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: number
          - type: boolean
          - $ref: '#/components/schemas/JSONObject'
          - $ref: '#/components/schemas/JSONArray'
    JSONArray:
      type: array
      items:
        $ref: '#/components/schemas/JSONObject'
