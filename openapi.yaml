openapi: 3.0.0
info:
  title: Melodi API
  description: API for managing Melodi resources such as threads, feedback, and users.
  version: 1.0.0
servers:
  - url: https://app.melodi.fyi/api/external

paths:
  /threads:
    get:
      summary: Retrieve all threads
      security:
        - ApiKeyHeader: []
        - ApiKeyQueryParam: []
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: integer
          description: Single thread ID or list of thread IDs to filter by
        - in: query
          name: externalUserIds
          schema:
            type: array
            items:
              type: string
          description: Single external user ID or list of external user IDs to filter by
        - in: query
          name: search
          schema:
            type: string
          description: Search term to filter threads
        - in: query
          name: userSearch
          schema:
            type: string
          description: Search term to filter by user
        - in: query
          name: projectId
          schema:
            type: integer
          description: ID of the project to filter threads by
        - in: query
          name: intentIds
          schema:
            oneOf:
              - type: integer
              - type: array
                items:
                  type: integer
          description: Single intent ID or list of intent IDs to filter by
        - in: query
          name: userSegmentIds
          schema:
            type: array
            items:
              type: integer
          description: Single user segment ID or list of user segment IDs to filter by
        - in: query
          name: before
          schema:
            type: string
            format: date-time
          description: Filter threads created before this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z)
        - in: query
          name: after
          schema:
            type: string
            format: date-time
          description: Filter threads created after this date (ISO 8601 format, e.g. 2024-03-21T00:00:00Z)
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 50
          description: Number of threads to return per page
        - in: query
          name: pageIndex
          schema:
            type: integer
            default: 0
          description: Page index for pagination
      responses:
        "200":
          description: Successfully retrieved list of threads
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  rows:
                    type: array
                    items:
                      $ref: "#/components/schemas/Thread"
                required:
                  - count
                  - rows
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    post:
      summary: Create a new thread
      security:
        - ApiKeyHeader: []
        - ApiKeyQueryParam: []
      requestBody:
        description: A thread object that needs to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "201":
          description: Thread successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    put:
      summary: Update an existing thread
      requestBody:
        description: A thread object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "200":
          description: Thread successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /feedback:
    post:
      summary: Create user feedback
      description: |
        This API can be used instead of our Feedback UI component (thumbs up/down) to create feedbacks that will be visible in the Feedback Inbox.
        Note: This endpoint requires a publishable API key as a query parameter only.
      security:
        - ApiKeyQueryParam: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackCreateRequest"
      responses:
        "200":
          description: Feedback successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalFeedback"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Missing or invalid publishable API key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /projects:
    get:
      summary: Retrieve projects for an organization
      security:
        - ApiKeyHeader: []
        - ApiKeyQueryParam: []
      parameters:
        - in: query
          name: organizationId
          required: true
          schema:
            type: string
          description: The ID of the organization to retrieve projects for
      responses:
        "200":
          description: Successfully retrieved projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

    post:
      summary: Create a new project
      security:
        - ApiKeyHeader: []
        - ApiKeyQueryParam: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
      responses:
        "201":
          description: Project successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    put:
      summary: Create or update an external user
      description: |
        Creates a new external user or updates an existing one if the externalId already exists.
        When creating a new user, segments will be automatically created if they don't exist.
      security:
        - ApiKeyHeader: []
        - ApiKeyQueryParam: []
      requestBody:
        description: External user object for creation or update
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - externalId
              properties:
                externalId:
                  type: string
                  description: External identifier for the user
                email:
                  type: string
                  nullable: true
                  description: User's email address
                name:
                  type: string
                  nullable: true
                  description: User's name
                username:
                  type: string
                  nullable: true
                  description: User's username
                segments:
                  type: object
                  additionalProperties:
                    type: string
                  description: Key-value pairs where the key is the segment type name and the value is the segment value
                  default: {}
      responses:
        "200":
          description: External user successfully created or updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExternalUser"
              example:
                id: 123
                organizationId: 456
                externalId: "user123"
                name: "John Doe"
                email: "user@example.com"
                username: "johndoe"
                segments:
                  [
                    {
                      id: 789,
                      name: "developer",
                      type: { id: 101, name: "role" },
                    },
                  ]
                createdAt: "2024-03-21T00:00:00Z"
                updatedAt: "2024-03-21T00:00:00Z"
        "400":
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - Invalid or missing API key
        "500":
          description: Internal Server Error

components:
  securitySchemes:
    ApiKeyHeader:
      type: apiKey
      in: header
      name: API-Key
      description: Your Melodi API key
    ApiKeyQueryParam:
      type: apiKey
      in: query
      name: apiKey
      description: Your Melodi API key. Note that for the feedback endpoint, this is a publishable API key.

  schemas:
    Thread:
      type: object
      properties:
        id:
          type: number
          description: Unique identifier for the thread
        externalId:
          type: string
          description: External thread ID
          nullable: true
        organizationId:
          type: number
          description: ID of the organization to which the thread belongs
        project:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
          required:
            - id
            - name
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
        externalUser:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/CreateExternalUserRequest"
        metadata:
          type: object
          description: Metadata associated with the thread
          additionalProperties:
            type: string
        createdAt:
          type: string
          format: date-time
          description: Date when the thread was created
        updatedAt:
          type: string
          format: date-time
          description: Date when the thread was last updated
      required:
        - id
        - organizationId
        - project
        - messages
        - metadata
        - createdAt
        - updatedAt

    BaseMessage:
      type: object
      properties:
        externalId:
          type: string
          nullable: true
        role:
          type: string
      required:
        - role

    BaseMessageResponse:
      allOf:
        - $ref: "#/components/schemas/BaseMessage"
        - type: object
          properties:
            metadata:
              type: object
              additionalProperties:
                type: string
              default: {}
          required:
            - metadata

    MarkdownMessage:
      title: "Markdown Message"
      allOf:
        - $ref: "#/components/schemas/BaseMessageResponse"
        - type: object
          properties:
            type:
              type: string
              enum: ["markdown"]
              default: "markdown"
            content:
              type: string
              nullable: true
          required:
            - content
            - type
            - metadata

    JsonMessage:
      title: "JSON Message"
      allOf:
        - $ref: "#/components/schemas/BaseMessageResponse"
        - type: object
          properties:
            type:
              type: string
              enum: ["json"]
              default: "json"
            jsonContent:
              type: object
              additionalProperties: true
          required:
            - jsonContent
            - type
            - metadata

    Message:
      description: |
        Message object that can be either a Markdown or JSON message.
        For Markdown messages, use the 'content' field.
        For JSON messages, use the 'jsonContent' field.
      oneOf:
        - $ref: "#/components/schemas/MarkdownMessage"
        - $ref: "#/components/schemas/JsonMessage"

    BaseMessageCreateRequest:
      allOf:
        - $ref: "#/components/schemas/BaseMessage"
        - type: object
          properties:
            metadata:
              type: object
              additionalProperties:
                type: string
              nullable: true

    CreateMarkdownMessageRequest:
      allOf:
        - $ref: "#/components/schemas/BaseMessageCreateRequest"
        - type: object
          properties:
            type:
              type: string
              enum: ["markdown"]
              default: "markdown"
            content:
              type: string
          required:
            - type
            - content

    CreateJsonMessageRequest:
      allOf:
        - $ref: "#/components/schemas/BaseMessageCreateRequest"
        - type: object
          properties:
            type:
              type: string
              enum: ["json"]
              default: "json"
            jsonContent:
              type: object
              additionalProperties: true
          required:
            - type
            - jsonContent

    CreateMessageRequest:
      oneOf:
        - $ref: "#/components/schemas/CreateMarkdownMessageRequest"
        - $ref: "#/components/schemas/CreateJsonMessageRequest"

    Error:
      type: object
      properties:
        error:
          type: string

    FeedbackCreateRequest:
      type: object
      description: |
        Create feedback request object. Feedback is always associated with a message:
        - If only externalThreadId is provided, feedback will be attached to the last message in the thread
        - If both externalThreadId and externalMessageId are provided, feedback will be attached to the specified message
        Note: externalThreadId is only unique per project, so including projectId is recommended to ensure correct thread identification.
      properties:
        feedbackType:
          type: string
          enum: ["POSITIVE", "NEGATIVE"]
          description: Type of feedback
        feedbackText:
          type: string
          description: Text content of the feedback
          nullable: true
        externalThreadId:
          type: string
          description: External ID of the thread containing the target message
        externalMessageId:
          type: string
          description: ID of the specific message for feedback. If not provided, feedback will be attached to the thread's last message
          nullable: true
        projectId:
          type: integer
          description: Recommended - ID of the project this thread belongs to. Helps ensure correct thread identification
          nullable: true
        externalUser:
          nullable: true
          description: External user information for associating feedback with a user
          allOf:
            - $ref: "#/components/schemas/CreateExternalUserRequest"
        attributes:
          type: object
          description: |
            Key-value pairs where:
            - key: attribute name (must match an existing attribute in the project)
            - value: option name (must match an existing option for that attribute)
          additionalProperties:
            type: string
          example:
            Quality: "Wonderful"
            Relevance: "High"
      required:
        - feedbackType
        - externalThreadId

    ExternalFeedbackMessageAssociation:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the message association
        messageId:
          type: integer
          format: int32
          description: ID of the associated message
        externalFeedbackId:
          type: integer
          format: int32
          description: ID of the external feedback (unique)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - messageId
        - externalFeedbackId

    ExternalFeedback:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the feedback
        feedbackType:
          type: string
          maxLength: 255
          nullable: true
          description: Type of the feedback
        feedbackText:
          type: string
          nullable: true
          description: Text content of the feedback
        externalUser:
          nullable: true
          description: Information about the external user who provided the feedback
          allOf:
            - $ref: "#/components/schemas/CreateExternalUserRequest"
        attributeOptions:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/AttributeOption"
              - type: object
                properties:
                  attribute:
                    $ref: "#/components/schemas/Attribute"
                required:
                  - attribute
          description: List of attribute options with their full attribute details
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - attributeOptions
        - createdAt
        - updatedAt

    UserInfo:
      type: object
      properties:
        id:
          type: string
          nullable: true
        email:
          type: string
      required:
        - email

    JSONObject:
      type: object
      additionalProperties:
        oneOf:
          - type: string
          - type: number
          - type: boolean
          - $ref: "#/components/schemas/JSONObject"
          - $ref: "#/components/schemas/JSONArray"
    JSONArray:
      type: array
      items:
        $ref: "#/components/schemas/JSONObject"

    Project:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the project
        name:
          type: string
          description: Name of the project
        organizationId:
          type: integer
          format: int32
          description: ID of the organization the project belongs to
      required:
        - id
        - name
        - organizationId

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the project to be created
      required:
        - name

    CreateThreadRequest:
      oneOf:
        - title: "Create Thread with Project ID"
          type: object
          required: [messages, projectId]
          properties:
            externalId:
              type: string
              nullable: true
            projectId:
              type: number
            projectName:
              type: string
              nullable: true
            messages:
              type: array
              items:
                $ref: "#/components/schemas/CreateMessageRequest"
            metadata:
              type: object
              additionalProperties:
                type: string
            externalUser:
              nullable: true
              allOf:
                - $ref: "#/components/schemas/CreateExternalUserRequest"
        - title: "Create Thread with Project Name"
          type: object
          required: [messages, projectName]
          properties:
            externalId:
              type: string
              nullable: true
            projectId:
              type: number
              nullable: true
            projectName:
              type: string
            messages:
              type: array
              items:
                $ref: "#/components/schemas/CreateMessageRequest"
            metadata:
              type: object
              additionalProperties:
                type: string
            externalUser:
              nullable: true
              allOf:
                - $ref: "#/components/schemas/CreateExternalUserRequest"

    Attribute:
      type: object
      description: |
        Represents an attribute. Note: The combination of projectId and name must be unique.
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the attribute
        organizationId:
          type: integer
          format: int32
          description: ID of the organization this attribute belongs to
        projectId:
          type: integer
          format: int32
          description: ID of the project this attribute belongs to
        name:
          type: string
          maxLength: 255
          description: Name of the attribute
        options:
          type: array
          items:
            $ref: "#/components/schemas/AttributeOption"
          description: List of options available for this attribute
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - organizationId
        - projectId
        - name
        - options
        - createdAt
        - updatedAt

    AttributeOption:
      type: object
      description: |
        Represents an attribute option. Note: The combination of attributeId and name must be unique.
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier for the attribute option
        attributeId:
          type: integer
          format: int32
          description: ID of the parent attribute
        name:
          type: string
          maxLength: 255
          description: Name of the attribute option
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - attributeId
        - name

    ExternalUser:
      type: object
      description: |
        Represents an external user. Note: The combination of organizationId and externalId must be
        unique.
      properties:
        id:
          type: number
          description: Unique identifier for the user
        organizationId:
          type: number
          description: ID of the organization this user belongs to
        externalId:
          type: string
          description: External identifier for the user
        name:
          type: string
          nullable: true
          description: User's name
        email:
          type: string
          nullable: true
          description: User's email address
        username:
          type: string
          nullable: true
          description: User's username
        segments:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              organizationId:
                type: number
              name:
                type: string
              userSegmentTypeId:
                type: number
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
              type:
                type: object
                properties:
                  id:
                    type: number
                  organizationId:
                    type: number
                  name:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                required:
                  - id
                  - organizationId
                  - name
                  - createdAt
                  - updatedAt
            required:
              - id
              - organizationId
              - name
              - userSegmentTypeId
              - createdAt
              - updatedAt
              - type
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - organizationId
        - externalId
        - createdAt
        - updatedAt
        - segments

    CreateExternalUserRequest:
      type: object
      description: Request object for creating or updating an external user
      properties:
        externalId:
          type: string
          description: External identifier for the user
        email:
          type: string
          nullable: true
          description: User's email address. Will be transformed to undefined if null
        name:
          type: string
          nullable: true
          description: User's name. Will be transformed to undefined if null
        username:
          type: string
          nullable: true
          description: User's username. Will be transformed to undefined if null
        segments:
          type: object
          additionalProperties:
            type: string
          nullable: true
          description: |
            Key-value pairs of segment information.
            Will be transformed to empty object if null or undefined.
          default: {}
          example: { "team": "engineering", "role": "developer" }
      required:
        - externalId
